using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace DocXml2md
{
	public class MdConverter
	{
		private string _outPutFolder;

		public MdConverter(string outPutFolder)
		{
			_outPutFolder = outPutFolder;
		}


		public void Convert(XmlDoc xmlDoc)
		{
			var assemblyFolderPath = Path.Combine(_outPutFolder, xmlDoc.AssemblyName.ToLower().Replace(".", "_"));
			if (Directory.Exists(assemblyFolderPath))
			{
				Directory.Delete(assemblyFolderPath,true);
			}
			Directory.CreateDirectory(assemblyFolderPath);

			var types = new List<Tuple<string,string>>();

			using (var sw = new StreamWriter(File.Create(Path.Combine(assemblyFolderPath, "README.md"))))
			{
				var sb = new StringBuilder();
				sb.AppendFormat("# {0}\n---\n", xmlDoc.AssemblyName);
				sb.Append("## Introduction").AppendLine().Append("Autogenerated documentation for ").Append(xmlDoc.AssemblyName).AppendLine();
				sb.Append("## Types and Classes").AppendLine();
				sb.Append("| Name  |     Description |").AppendLine();
				sb.Append("|---|---|").AppendLine();
				sw.Write(sb);
				foreach (var xmlMember in xmlDoc.Members.Where(x => x.MemberType == MemberType.Type))
				{
					var t = new Tuple<string,string>(xmlMember.FullName, xmlMember.FullName.ToLower().Replace(".", "_"));
					sw.Write($"| [{t.Item1}]({t.Item2}.md) |    To Do Description | {Environment.NewLine}");
					types.Add(t);
				}
				sb.Clear();
				sb.Append("---").AppendLine().Append("Realized with docxml2md").AppendLine();
				sw.Write(sb);
			}

			System.Threading.Tasks.Parallel.ForEach(types, (type) =>
			{
				var file = File.Create(Path.Combine(assemblyFolderPath, $"{type.Item2}.md"));
				var xm = xmlDoc.Members.First(x => x.FullName == type.Item1);
				using (var sw = new StreamWriter(file))
				{
					var sb = new StringBuilder();
					sb.AppendFormat("# {0}\n\n---\n\n", xm.FullName);
					sb.Append("## Introduction").AppendLine().AppendFormat("Autogenerated documentation for [{0}](README.md)", xmlDoc.AssemblyName).AppendLine();
					sb.Append("TODO: add info \n\n---\n\n");
					sw.Write(sb);

					var children = xmlDoc.Members.Where(x => x.ParentTypeName.Equals(xm.FullName, StringComparison.OrdinalIgnoreCase)).ToList();
					if (children.Any(x => x.MemberType == MemberType.Field))
					{
						sb.Clear();
						foreach (var f in children.Where(x => x.MemberType == MemberType.Field))
						{
							sb.Append(f.Render());
						}
						sw.Write($"## Fields \n\n{sb}\n\n---\n\n");
					}
					if (children.Any(x => x.MemberType == MemberType.Property))
					{
						sb.Clear();
						foreach (var f in children.Where(x => x.MemberType == MemberType.Property))
						{
							sb.Append(f.Render());
						}
						sw.Write($"## Properties \n\n{sb}\n\n---\n\n");
					}
					if (children.Any(x => x.MemberType == MemberType.Method))
					{
						sb.Clear();
						foreach (var f in children.Where(x => x.MemberType == MemberType.Method))
						{
							sb.Append(f.Render());
						}
						sw.Write($"## Methods \n\n{sb}\n\n---\n\n");
					}
					if (children.Any(x => x.MemberType == MemberType.Event))
					{
						sb.Clear();
						foreach (var f in children.Where(x => x.MemberType == MemberType.Event))
						{
							sb.Append(f.Render());
						}
						sw.Write($"## Events \n\n{sb}\n\n---\n\n");
					}
					sb.Clear();
					sb.Append("---").AppendLine().Append("Realized with docxml2md").AppendLine();
					sw.Write(sb);
				}
			});

		}
	}
}